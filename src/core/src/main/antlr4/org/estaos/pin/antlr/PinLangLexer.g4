lexer grammar PinLangLexer;

A                        : '&';
AA                       : '&&';
C                        : ',';
CB                       : ']';
CBC                      : '}';
CIR                      : '^';
CO                       : ':';
CP                       : ')';
DDD                      : '...';
EE                       : '==';
EG                       : '=>';
EQ                       : '=';
GT                       : '>';
LT                       : '<';
LTEQ                     : '<=';
GTEQ                     : '>=';
LTLT                     : '<<';
GTGT                     : '>>';
MINUS                    : '-';
MM                       : '--';
NE                       : '!=';
NOT                      : '!';
OB                       : '[';
OBC                      : '{';
OP                       : '(';
P                        : '|';
PC                       : '%';
PL                       : '+';
PLPL                     : '++';
PP                       : '||';
SC                       : ';';
SL                       : '/';
SQUIG                    : '~';
ST                       : '*';
HASH                     : '#';
BREAK_                   : 'break';
CONTINUE_                : 'continue';
DO_                      : 'do';
ELSE_                    : 'else';
EXTERN_                  : 'extern';
FALSE_                   : 'false';
TRUE_                    : 'true';
FINAL_                   : 'final';
FOR_                     : 'for';
FUNCTION_                : 'function';
IF_                      : 'if';
IMPORT_                  : 'import';
VAR_                     : 'var';
RETURN_                  : 'return';
VOID_                    : 'void';
WHILE_                   : 'while';
AS_                      : 'as';
TYPEDEF_                 : 'typedef';
NULL_                    : 'null';
NUMBER                   : DIGIT+ ( '.' DIGIT+)? EXPONENT? | '.' DIGIT+ EXPONENT?;
HEX_NUMBER               : '0x' HEX_DIGIT+ | '0X' HEX_DIGIT+;

SINGLE_LINE_STRING       : '"' SINGLE_LINE_STRING_CONTENT '"';
CHAR                     : '\'' CHAR_CONTENT '\'';
MULTI_LINE_STRING        : '`' MULTI_LINE_STRING_CONTENT '`';

 IDENTIFIER               : IDENTIFIER_START IDENTIFIER_PART*;
WHITESPACE               : ( '\t' | ' ' | NEWLINE)+              -> skip;
MULTI_LINE_COMMENT_LINE  : '///' ~[\r\n]*;
SINGLE_LINE_COMMENT      : '//' ~[\r\n]*                         -> skip;

fragment EXPONENT                   : ( 'e' | 'E') ( '+' | '-')? DIGIT+;
fragment HEX_DIGIT                  : 'a' .. 'f' | 'A' .. 'F' | DIGIT;
fragment SINGLE_LINE_STRING_CONTENT : (~["\r\n\\] | '\\' .)*;
fragment CHAR_CONTENT               : (~["\r\n\\] | '\\' .);
fragment MULTI_LINE_STRING_CONTENT  : ( .*? );
fragment NEWLINE                    : '\n' | '\r' | '\r\n';
fragment IDENTIFIER_START           : LETTER | '_';
fragment IDENTIFIER_PART            : IDENTIFIER_START | DIGIT;
fragment LETTER                     : 'a' .. 'z' | 'A' .. 'Z';
fragment DIGIT                      : '0' .. '9';
